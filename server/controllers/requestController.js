import db from '../config/db.js';
import { sendEmail } from '../mailer.js';

export const submitRequest = async (req, res, next) => {
  try {
    const {
      full_name = "",
      phone = "",
      email = "",
      service_type = "",
      object_type = "",
      objectType = "",
      object_area = "",
      objectArea = "",
      estimate_value = "",
      estimateValue = "",
      id_section = "",
      control_period = "",
      object = "",
      deadline = "",
      review_deadline = "",
      estimated_price = "",
      estimatedPrice = "",
      message = "",
      sections = [],
    } = req.body;
    if (!full_name?.trim() || !phone?.trim()) {
      return res.status(400).json({ error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const cleanedPhone = phone.replace(/\D/g, '');
    if (!/^7\d{10}$/.test(cleanedPhone)) {
      return res.status(400).json({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 7)' });
    }
    console.log('üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
      full_name,
      phone,
      email,
      service_type,
      object_type,
      objectType,
      object_area,
      objectArea,
      estimate_value,
      estimateValue,
      id_section,
      control_period,
      object,
      deadline,
      review_deadline,
      estimated_price,
      estimatedPrice,
      message,
      sections,
    });
    await new Promise((resolve, reject) => {
      db.run(
        `INSERT INTO applications (full_name, phone, service_type, message)
         VALUES (?, ?, ?, ?)`,
        [
          full_name.trim(),
          phone.trim(),
          service_type?.trim() || "",
          message?.trim() || "",
        ],
        (err) => {
          if (err) {
            console.error('‚ùå SQLite –æ—à–∏–±–∫–∞:', err.message);
            return reject(err);
          }
          resolve();
        }
      );
    });
    try {
      console.log('üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ...');

      await sendEmail({
        full_name,
        phone,
        email,
        service_type,
        object_type: object_type || objectType,
        object_area: object_area || objectArea,
        estimate_value: estimate_value || estimateValue,
        id_section,
        control_period,
        object,
        deadline,
        review_deadline,
        estimated_price: estimated_price || estimatedPrice,
        message,
        sections: Array.isArray(sections)
          ? sections
          : (typeof sections === "string" && sections.startsWith("["))
            ? JSON.parse(sections)
            : [],
      });

      console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (emailErr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', emailErr.message);
    }

    return res.status(201).json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' });
  } catch (err) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ submitRequest:', err);
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
